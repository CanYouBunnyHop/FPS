//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/1.Scripts/InputsStuff/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerActionMap"",
            ""id"": ""054f42b3-201b-487a-9a6a-74eaa7293b45"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""42f7a9e9-ba29-43b6-bbd1-107c0530e76e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""b0c22fc4-2932-4efe-9f36-09a41a3f12b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""1f0f5ea4-dd8f-4fa5-9998-66b5fca4babd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""10463b83-b4bb-48a2-a694-68247a1eb607"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""3ba54d86-29fd-4ae6-8f03-3880c25594da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""20fa55d7-81e1-406c-b763-2bb0017f6340"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackAiming"",
                    ""type"": ""Button"",
                    ""id"": ""d6d898ab-675b-4d25-ac8e-bea77ebe3bb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleWeaponUp"",
                    ""type"": ""Value"",
                    ""id"": ""ede36063-878a-4a5e-a298-d40af5b70035"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CycleWeaponDown"",
                    ""type"": ""Value"",
                    ""id"": ""74f10085-a9de-4d7b-bf2d-992d0ba2a9ed"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GrapplingHook"",
                    ""type"": ""Button"",
                    ""id"": ""a79caf74-827d-45ba-893c-5bf32d1ff147"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""853c39a2-cd68-48b1-9baf-ea1dfb0ea747"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""972860f2-0d9d-4d63-ace7-fa9e45fd7d91"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Primary WASD"",
                    ""id"": ""49b277fc-f806-4fc5-8120-3d3088c36fdf"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0a208e9b-438f-4ed9-b287-4989cd8cd6f6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ead3b6f6-0de1-4ef5-8cec-29a51a51370c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b79401c9-c071-4018-b06f-8eb8743b00bd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a80cbb67-875f-4593-b6f3-943689a6ccc6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9161b6b2-232b-4477-884d-531e349600fc"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7b67f00-2b6d-416c-9dd2-e5534160265d"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff625e13-cbdd-44e0-b1e4-9683259f642c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c909f0b0-69a3-4e65-8247-7accf1326115"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a352041-8e1d-47a4-a375-3fd8c636c1b2"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""BackAiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b67c7f11-a6a0-4c04-968e-82a6b6343b99"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""CycleWeaponUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e37c7f03-fd97-4bd0-afaf-01ba7cc9d394"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": ""PC MnK"",
                    ""action"": ""CycleWeaponDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fb3be36-0676-40bf-9238-51e41fc8f5b9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC MnK"",
                    ""action"": ""GrapplingHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC MnK"",
            ""bindingGroup"": ""PC MnK"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerActionMap
        m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
        m_PlayerActionMap_Jump = m_PlayerActionMap.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActionMap_WASD = m_PlayerActionMap.FindAction("WASD", throwIfNotFound: true);
        m_PlayerActionMap_Sprint = m_PlayerActionMap.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerActionMap_Crouch = m_PlayerActionMap.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerActionMap_Fire = m_PlayerActionMap.FindAction("Fire", throwIfNotFound: true);
        m_PlayerActionMap_ADS = m_PlayerActionMap.FindAction("ADS", throwIfNotFound: true);
        m_PlayerActionMap_BackAiming = m_PlayerActionMap.FindAction("BackAiming", throwIfNotFound: true);
        m_PlayerActionMap_CycleWeaponUp = m_PlayerActionMap.FindAction("CycleWeaponUp", throwIfNotFound: true);
        m_PlayerActionMap_CycleWeaponDown = m_PlayerActionMap.FindAction("CycleWeaponDown", throwIfNotFound: true);
        m_PlayerActionMap_GrapplingHook = m_PlayerActionMap.FindAction("GrapplingHook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActionMap
    private readonly InputActionMap m_PlayerActionMap;
    private IPlayerActionMapActions m_PlayerActionMapActionsCallbackInterface;
    private readonly InputAction m_PlayerActionMap_Jump;
    private readonly InputAction m_PlayerActionMap_WASD;
    private readonly InputAction m_PlayerActionMap_Sprint;
    private readonly InputAction m_PlayerActionMap_Crouch;
    private readonly InputAction m_PlayerActionMap_Fire;
    private readonly InputAction m_PlayerActionMap_ADS;
    private readonly InputAction m_PlayerActionMap_BackAiming;
    private readonly InputAction m_PlayerActionMap_CycleWeaponUp;
    private readonly InputAction m_PlayerActionMap_CycleWeaponDown;
    private readonly InputAction m_PlayerActionMap_GrapplingHook;
    public struct PlayerActionMapActions
    {
        private @InputActions m_Wrapper;
        public PlayerActionMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerActionMap_Jump;
        public InputAction @WASD => m_Wrapper.m_PlayerActionMap_WASD;
        public InputAction @Sprint => m_Wrapper.m_PlayerActionMap_Sprint;
        public InputAction @Crouch => m_Wrapper.m_PlayerActionMap_Crouch;
        public InputAction @Fire => m_Wrapper.m_PlayerActionMap_Fire;
        public InputAction @ADS => m_Wrapper.m_PlayerActionMap_ADS;
        public InputAction @BackAiming => m_Wrapper.m_PlayerActionMap_BackAiming;
        public InputAction @CycleWeaponUp => m_Wrapper.m_PlayerActionMap_CycleWeaponUp;
        public InputAction @CycleWeaponDown => m_Wrapper.m_PlayerActionMap_CycleWeaponDown;
        public InputAction @GrapplingHook => m_Wrapper.m_PlayerActionMap_GrapplingHook;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionMapActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnJump;
                @WASD.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnWASD;
                @WASD.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnWASD;
                @WASD.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnWASD;
                @Sprint.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSprint;
                @Crouch.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCrouch;
                @Fire.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnFire;
                @ADS.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnADS;
                @ADS.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnADS;
                @ADS.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnADS;
                @BackAiming.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnBackAiming;
                @BackAiming.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnBackAiming;
                @BackAiming.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnBackAiming;
                @CycleWeaponUp.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCycleWeaponUp;
                @CycleWeaponUp.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCycleWeaponUp;
                @CycleWeaponUp.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCycleWeaponUp;
                @CycleWeaponDown.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCycleWeaponDown;
                @CycleWeaponDown.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCycleWeaponDown;
                @CycleWeaponDown.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnCycleWeaponDown;
                @GrapplingHook.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnGrapplingHook;
                @GrapplingHook.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnGrapplingHook;
                @GrapplingHook.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnGrapplingHook;
            }
            m_Wrapper.m_PlayerActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @WASD.started += instance.OnWASD;
                @WASD.performed += instance.OnWASD;
                @WASD.canceled += instance.OnWASD;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @ADS.started += instance.OnADS;
                @ADS.performed += instance.OnADS;
                @ADS.canceled += instance.OnADS;
                @BackAiming.started += instance.OnBackAiming;
                @BackAiming.performed += instance.OnBackAiming;
                @BackAiming.canceled += instance.OnBackAiming;
                @CycleWeaponUp.started += instance.OnCycleWeaponUp;
                @CycleWeaponUp.performed += instance.OnCycleWeaponUp;
                @CycleWeaponUp.canceled += instance.OnCycleWeaponUp;
                @CycleWeaponDown.started += instance.OnCycleWeaponDown;
                @CycleWeaponDown.performed += instance.OnCycleWeaponDown;
                @CycleWeaponDown.canceled += instance.OnCycleWeaponDown;
                @GrapplingHook.started += instance.OnGrapplingHook;
                @GrapplingHook.performed += instance.OnGrapplingHook;
                @GrapplingHook.canceled += instance.OnGrapplingHook;
            }
        }
    }
    public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);
    private int m_PCMnKSchemeIndex = -1;
    public InputControlScheme PCMnKScheme
    {
        get
        {
            if (m_PCMnKSchemeIndex == -1) m_PCMnKSchemeIndex = asset.FindControlSchemeIndex("PC MnK");
            return asset.controlSchemes[m_PCMnKSchemeIndex];
        }
    }
    public interface IPlayerActionMapActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnWASD(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnADS(InputAction.CallbackContext context);
        void OnBackAiming(InputAction.CallbackContext context);
        void OnCycleWeaponUp(InputAction.CallbackContext context);
        void OnCycleWeaponDown(InputAction.CallbackContext context);
        void OnGrapplingHook(InputAction.CallbackContext context);
    }
}
